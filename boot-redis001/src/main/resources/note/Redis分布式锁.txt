
靠谱分布式锁需要具备的条件?
  1.独占性
    OnlyOne，任何时刻只能有且仅有一个线程持有
  2.高可用
    若redis集群环境下，不能因为某一个节点挂了而出现获取锁和释放锁失败的情况
  3.防死锁
    杜绝死锁，必须有超时控制机制或者撤销操作，有个兜底终止跳出方案
  4.不乱抢
    防止张冠李戴，不能私下unlock别人的锁，只能自己加锁自己释放。
  5.重入性
    同一个节点的同一个线程如果获得锁之后，它也可以再次获取这个锁。

Redis分布式锁详见:
     StockController实现

Redis实现锁的可重入性：
      RedisWithReentrantLock的实现

综上，Redis分布式锁，生产环境下，推荐使用 Redisson，Redis官网推荐的解决方案


问题：
 1.单机Redis分布式锁没有问题，但是在主从，集群下，分布式锁可能会丢失
    例如：
        线程 1 首先获取锁成功，将键值对写入 redis 的 master 节点；
        在 redis 将该键值对同步到 slave 节点之前，master 发生了故障；
        redis 触发故障转移，其中一个 slave 升级为新的 master；
        此时新的 master 并不包含线程 1 写入的键值对，因此线程 2 尝试获取锁也可以成功拿到锁；
        此时相当于有两个线程获取到了锁，可能会导致各种预期之外的情况发生，例如最常见的脏数据。

  2.Redis也提供了Redlock算法，用来实现基于多个实例的分布式锁。
      锁变量由多个实例维护，即使有实例发生了故障，锁变量仍然是存在的，客户端还是可以完成锁操作。
      Redlock算法是实现高可靠分布式锁的一种有效解决方案，可以在实际开发中使用.

  3.Redlock算法设计理念
       该方案也是基于（set 加锁、Lua 脚本解锁）进行改良的，所以redis之父antirez 只描述了差异的地方，大致方案如下。
       假设我们有N个Redis主节点，例如 N = 5这些节点是完全独立的，我们不使用复制或任何其他隐式协调系统，
       为了取到锁客户端执行以下操作：
       1	获取当前时间，以毫秒为单位；
       2	依次尝试从5个实例，使用相同的 key 和随机值（例如 UUID）获取锁。当向Redis 请求获取锁时，客户端应该设置一个超时时间，这个超时时间应该小于锁的失效时间。
            例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以防止客户端在试图与一个宕机的 Redis 节点对话时长时间处于阻塞状态。
            如果一个实例不可用，客户端应该尽快尝试去另外一个 Redis 实例请求获取锁；
       3	客户端通过当前时间减去步骤 1 记录的时间来计算获取锁使用的时间。当且仅当从大多数（N/2+1，这里是 3 个节点）的 Redis 节点都取到锁，并且获取锁使用的时间小于锁失效时间时，锁才算获取成功；
       4	如果取到了锁，其真正有效时间等于初始有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。
       5	如果由于某些原因未能获得锁（无法在至少 N/2 + 1 个 Redis 实例获取锁、或获取锁的时间超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些Redis实例根本就没有加锁成功，
            防止某些节点获取到锁但是客户端没有得到响应而导致接下来的一段时间不能被重新获取锁）。

    该方案为了解决数据不一致的问题，直接舍弃了异步复制只使用 master 节点，同时由于舍弃了 slave，为了保证可用性，
    引入了 N 个节点，官方建议是 5。
    客户端只有在满足下面的这两个条件时，才能认为是加锁成功。
      条件1：客户端从超过半数（大于等于N/2+1）的Redis实例上成功获取到了锁；
      条件2：客户端获取锁的总耗时没有超过锁的有效时间。

  4.Redisson源码解析
    1.缓存续命?
      分布式锁过期了，但是业务逻辑还没处理完怎么办?
       1.守护线程“续命”, 额外起一个线程，定期检查线程是否还持有锁，如果有则延长过期时间。
         Redisson 里面就实现了这个方案，使用“看门狗”定期检查（每1/3的锁时间检查1次），如果线程还持有锁，则刷新过期时间；
       2.在获取锁成功后，给锁加一个 watchdog，watchdog 会起一个定时任务，在锁没有被释放且快要过期的时候会续期

    2.加锁入口源码分析：
       RLock.lock() --> RedissonLock.lock()  --> RedissonLock.tryAcquire()  --> RedissonLock.tryAcquireAsync()

       主要加锁的代码如下，使用lua脚本：
             evalWriteAsync(getName(), LongCodec.INSTANCE, command,
                             "if (redis.call('exists', KEYS[1]) == 0) then " +
                                     "redis.call('hincrby', KEYS[1], ARGV[2], 1); " +
                                     "redis.call('pexpire', KEYS[1], ARGV[1]); " +
                                     "return nil; " +
                                     "end; " +
                                     "if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then " +
                                     "redis.call('hincrby', KEYS[1], ARGV[2], 1); " +
                                     "redis.call('pexpire', KEYS[1], ARGV[1]); " +
                                     "return nil; " +
                                     "end; " +
                                     "return redis.call('pttl', KEYS[1]);",
                             Collections.singletonList(getName()), internalLockLeaseTime, getLockName(threadId));

       加锁lua代码解析：
          第一个 if，判断加锁的key不存在，使用hash结构实现首次加锁。
          第一个 if，判断加锁的key存在，并且还是当前线程加锁，使用hash结构实现可重入锁。
          否则，加锁失败，返回锁失效的时间。

       在加锁完成之后，实现看门狗后台线程：
          scheduleExpirationRenewal(threadId);
          看门狗每隔锁的lock时间的3分之一，去续一次期，并把锁的时间重置到锁设置的锁定时间，具体代码详见：RedissonLock.renewExpiration()

    3. 解锁源码分析：
          RLock.unLock() ---> RedissonLock.unlock() --> RedissonLock.unlockAsync()  --> RedissonLock.unlockInnerAsync()

       主要解锁的代码如下，使用lua脚本：
           evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,
                          "if (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then " +
                                  "return nil;" +
                                  "end; " +
                                  "local counter = redis.call('hincrby', KEYS[1], ARGV[3], -1); " +
                                  "if (counter > 0) then " +
                                  "redis.call('pexpire', KEYS[1], ARGV[2]); " +
                                  "return 0; " +
                                  "else " +
                                  "redis.call('del', KEYS[1]); " +
                                  "redis.call('publish', KEYS[2], ARGV[1]); " +
                                  "return 1; " +
                                  "end; " +
                                  "return nil;",
                          Arrays.asList(getName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));

           解锁lua代码解析：
              第一个 if，判断判断是否是当前线程加的锁，不是直接返回nil
              若是当前线程，则将当前的可重入次数减1，判断可重入次数是否大于0，若是，刷新过期时间，返回0
              否则，直接删除锁，发布删除锁的消息。

        在解锁完成之后，实现看门狗释放：
             cancelExpirationRenewal(threadId); 移除看门狗的线程ID。




