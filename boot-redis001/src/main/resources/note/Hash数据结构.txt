1.hash的两种编码格式
  ziplist
  hashtable

2.使用ziplist的条件:
  hash-max-ziplist-entries：使用压缩列表保存时哈希集合中的最大元素个数。
  hash-max-ziplist-value：使用压缩列表保存时哈希集合中单个元素的最大长度。

  1.哈希对象保存的键值对数量小于 512 个；
  2.所有的键值对的健和值的字符串长度都小于等于 64byte（一个英文字母一个字节） 时用ziplist

3.压缩列表

  <zlbytes> <zltail> <zllen> <entry> <entry> ... <entry> <zlend>

  typedef struct zlentry {    // 压缩列表节点
      // prevrawlen是前一个节点的长度
     unsigned int prevrawlensize, prevrawlen;
     //prevrawlensize是指prevrawlen的大小，有1字节和5字节两种
      unsigned int prevrawlensize, prevrawlen;
      // len为当前节点长度 lensize为编码len所需的字节大小
      unsigned int lensize, len;
       // 当前节点的header大小
      unsigned int headersize;
      // 节点的编码方式
      unsigned char encoding;
      // 指向节点的指针
      unsigned char *p;
  } zlentry;

  压缩列表zlentry节点结构：每个zlentry由前一个节点的长度、encoding和entry-data三部分组成

  前节点：(前节点占用的内存字节数)表示前1个zlentry的长度，prev_len有两种取值情况：1字节或5字节。取值1字节时，表示上一个entry的长度小于254字节。
  虽然1字节的值能表示的数值范围是0到255，但是压缩列表中zlend的取值默认是255，因此，就默认用255表示整个压缩列表的结束，其他表示长度的地方就不能再用255这个值了。
  所以，当上一个entry长度小于254字节时，prev_len取值为1字节，否则，就取值为5字节。
  enncoding：记录节点的content保存数据的类型和长度。
  content：保存实际数据内容

  压缩列表的遍历：
  通过指向表尾节点的位置指针p1, 减去节点的previous_entry_length，得到前一个节点起始地址的指针。如此循环，从表尾遍历到表头节点。
  从表尾向表头遍历操作就是使用这一原理实现的，只要我们拥有了一个指向某个节点起始地址的指针，那么通过这个指针以及这个节点的previous_entry_length属性程序就可以一直向前一个节点回溯，
  最终到达压缩列表的表头节点。

4.明明有链表了，为什么出来一个压缩链表?

   1 普通的双向链表会有两个指针，在存储数据很小的情况下，我们存储的实际数据的大小可能还没有指针占用的内存大，得不偿失。
   ziplist 是一个特殊的双向链表没有维护双向指针:prev next；而是存储上一个 entry的长度和 当前entry的长度，通过长度推算下一个元素在什么地方。
   牺牲读取的性能，获得高效的存储空间，因为(简短字符串的情况)存储指针比存储entry长度更费内存。这是典型的“时间换空间”。

   2 链表在内存中一般是不连续的，遍历相对比较慢，而ziplist可以很好的解决这个问题，普通数组的遍历是根据数组里存储的数据类型找到下一个元素的(例如int类型的数组访问下一个元素时每次只需要移动一个sizeof(int)就行)，
   但是ziplist的每个节点的长度是可以不一样的，而我们面对不同长度的节点又不可能直接sizeof(entry)，所以ziplist只好将一些必要的偏移量信息记录在了每一个节点里，使之能跳到上一个节点或下一个节点。

   3 头节点里有头节点里同时还有一个参数 len，和string类型提到的 SDS 类似，这里是用来记录链表长度的。因此获取链表长度时不用再遍历整个链表，直接拿到len值就可以了，这个时间复杂度是 O(1)。

详见: ziplist解析.png

5.压缩列表节点的构成
  压缩列表是 Redis 为节约空间而实现的一系列特殊编码的连续内存块组成的顺序型数据结构，本质上是字节数组
  在模型上将这些连续的数组分为3大部分，分别是header+entry集合+end，
  其中header由zlbytes+zltail+zllen组成，
  entry是节点，
  zlend是一个单字节255(1111 1111)，用做ZipList的结尾标识符。见下： 压缩列表结构：由zlbytes、zltail、zllen、entry、zlend这五部分组成

  zlbytes  4字节，记录整个压缩列表占用的内存字节数。
  zltail   4字节，记录压缩列表表尾节点的位置。
  zllen 2字节，记录压缩列表节点个数。
  zlentry  列表节点，长度不定，由内容决定。
  zlend 1字节，0xFF 标记压缩的结束。

6.ziplist存取情况
    详见: ziplist存取.png

在 Redis 中，hashtable 被称为字典（dictionary），它是一个数组+链表的结构


OBJ_ENCODING_HT 编码分析
  每个键值对都会有一个dictEntry。
  OBJ_ENCODING_HT 这种编码方式内部才是真正的哈希表结构，或称为字典结构，其可以实现O(1)复杂度的读写操作，因此效率很高。
  在 Redis内部，从 OBJ_ENCODING_HT类型到底层真正的散列表数据结构是一层层嵌套下去的，组织关系见面图：详见: hash结构图.png


