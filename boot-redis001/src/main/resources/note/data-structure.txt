                                                  Redis数据类型应用场景
String数据类型
使用场景：
 1.比如抖音无限点赞某个视频或者商品，点一下加一次：incr命令
 2.分布式锁

hash数据类型
使用场景：
 1.购物车，小中厂可用

list数据类型
使用场景：
 1.微信公众号订阅的消息
   1.1：大V作者和CSDN发布了文章分别是 11 和 22
   1.2：XX关注了他们两个，只要他们发布了新文章，就会安装进我的List
       lpush likearticle:XX    11 22
   1.3: 查看XX自己的号订阅的全部文章，类似分页，下面0~10就是一次显示10条
        lrange likearticle:XX 0 9

 2.商品评论列表
   2.1 用户针对某一商品发布评论，一个商品会被不同的用户进行评论，保存商品评论时，要按时间顺序排序
       使用list存储商品评论信息，key是该商品的id，value是商品评论信息商品编号为1001的商品评论key【items:comment:1001】
       lpush items:comment:1001 {"id":1001,"name":"huawei","date":1600484283054,"content":"lasjfdljsa;fdlkajsd;lfjsa;ljf;lasjf;lasjfdlsad"}

set数据类型
 使用场景：
  1.微信抽奖小程序
     1.1 用户ID，立即参与按钮	sadd key 用户ID
     1.2 显示已经有多少人参与了，上图23208人参加	SCARD key
     1.3 抽奖(从set中任意选取N个中奖人)	SRANDMEMBER key 2       随机抽奖2个人，元素不删除
                                    SPOP  key 3             随机抽奖3个人，元素会删除

  2.微信朋友圈点赞
      2.1 新增点赞	sadd pub:msgID  点赞用户ID1  点赞用户ID2
      2.2 取消点赞	srem pub:msgID  点赞用户ID
      2.3 展现所有点赞过的用户	SMEMBERS  pub:msgID
      2.4 点赞用户数统计，就是常见的点赞红色数字	scard  pub:msgID
      2.5 判断某个朋友是否对楼主点赞过	SISMEMBER pub:msgID 用户ID

  3.微博好友关注社交关系
    3.1 共同关注的人
        A用户关注的人：sadd A 1 2 3 4 5
        B用户关注的人：sadd B 3 4 6 7 8
        共同关注：sinter A B

    3.2 我关注的人也关注他(大家爱好相同)
        A关注了B，B也关注了C，A和B有共同的爱好
        sadd A 1 2 3 4 5
        sadd B 3 4 5 6 7

        SISMEMBER A 3
        SISMEMBER A 3

    3.3 QQ内推可能认识的人
         sadd A 1 2 3 4 5
         sadd B 3 4 5 6 7

         给B用户推荐A用户的朋友
         sdiff A B

zset数据类型
 使用场景：
  1.根据商品销售对商品进行排序显示
     思路：定义商品销售排行榜(sorted set集合)，key为goods:sellsort，分数为商品销售数量。
     1.1 商品编号1001的销量是9，商品编号1002的销量是15
        zadd goods:sellsort 9 1001 15 1002
     1.2 有一个客户又买了2件商品1001，商品编号1001销量加2
        zincrby goods:sellsort 2 1001
     1.3 求商品销量前10名
        ZRANGE goods:sellsort 0 10 withscores

  2.抖音热搜
    2.1 点击视频
        ZINCRBY hotvcr:20200919 1 八佰
        ZINCRBY hotvcr:20200919 15 八佰 2 花木兰
    2.2 展示当日排行前10条
        ZREVRANGE hotvcr:20200919 0 9 withscores  从大到小


bitmap
  Bitmap的偏移量是从零开始算的
  1.京东签到领取京豆
     1.1 基于Redis的Bitmaps实现签到日历
     1.2 在签到统计时，每个用户一天的签到用1个bit位就能表示，
     1.3 一个月（假设是31天）的签到情况用31个bit位就可以，一年的签到也只需要用365个bit位，根本不用太复杂的集合类型
     setbit 键   偏移位  只能零或者1
        setbit sign:u1 202106  0 1
        setbit sign:u1 202106  1 1
        setbit sign:u1 202106  2 1
        setbit sign:u1 202106  6 1

     getbit key offset
       getbit sign:u1 202106  0 30

     计算月活:
     全部键里面含有1的有多少个
     bitcount sign:u1 202106  0 30

  2.bitmap的底层编码说明，get命令操作如何
     底层结构是string，实质是二进制的ascii编码对应
     不是字符串长度而是占据几个字节，超过8位后自己按照8位一组一byte再扩容

  3.bitop
     连续2天都签到的用户

     加入某个网站或者系统，它的用户有1000W，做个用户id和位置的映射
     比如0号位对应用户id：uid-092iok-lkj
     比如1号位对应用户id：uid-7388c-xxx

      setbit 202106  0 1
      setbit 202106  1 1
      setbit 202106  2 1


      setbit 202107  0 1
      setbit 202107  1 1

      计算某用户是否在6月，7月的2号登录
      bitop and destkey  202106  202107

HyperLogLog
   1.只是进行不重复的基数统计，不是集合也不保存数据，只记录数量而不是具体内容
   2.非精确统计， 牺牲准确率来换取空间，误差仅仅只是0.81%左右

   为什么redis集群的最大槽数是16384个？
     github: https://github.com/redis/redis/issues/2576

     Redis集群并没有使用一致性hash而是引入了哈希槽的概念。Redis 集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，
     集群的每个节点负责一部分hash槽。但为什么哈希槽的数量是16384（2^14）个呢？

     CRC16算法产生的hash值有16bit，该算法可以产生2^16=65536个值。
     换句话说值是分布在0~65535之间。那作者在做mod运算的时候，为什么不mod65536，而选择mod16384？

     正常的心跳数据包带有节点的完整配置，可以用幂等方式用旧的节点替换旧节点，以便更新旧的配置。
     这意味着它们包含原始节点的插槽配置，该节点使用2k的空间和16k的插槽，但是会使用8k的空间（使用65k的插槽）。
     同时，由于其他设计折衷，Redis集群不太可能扩展到1000个以上的主节点。
     因此16k处于正确的范围内，以确保每个主机具有足够的插槽，最多可容纳1000个矩阵，但数量足够少，可以轻松地将插槽配置作为原始位图传播。
     请注意，在小型群集中，位图将难以压缩，因为当N较小时，位图将设置的slot / N位占设置位的很大百分比。

     (1)如果槽位为65536，发送心跳信息的消息头达8k，发送的心跳包过于庞大。
     在消息头中最占空间的是myslots[CLUSTER_SLOTS/8]。 当槽位为65536时，这块的大小是: 65536÷8÷1024=8kb
     因为每秒钟，redis节点需要发送一定数量的ping消息作为心跳包，如果槽位为65536，这个ping消息的消息头太大了，浪费带宽。

     (2)redis的集群主节点数量基本不可能超过1000个。
     集群节点越多，心跳包的消息体内携带的数据越多。如果节点过1000个，也会导致网络拥堵。因此redis作者不建议redis cluster节点数量超过1000个。 那么，对于节点数在1000以内的redis cluster集群，16384个槽位够用了。没有必要拓展到65536个。

     (3)槽位越小，节点少的情况下，压缩比高，容易传输
     Redis主节点的配置信息中它所负责的哈希槽是通过一张bitmap的形式来保存的，在传输过程中会对bitmap进行压缩，但是如果bitmap的填充率slots / N很高的话(N表示节点数)，bitmap的压缩率就很低。 如果节点数很少，而哈希槽数量很多的话，bitmap的压缩率就很低。

   基本命令：
      pfadd  key ele...                   将所有的元素加入到key中
      pfcount key                         计算key的基数(不准确)
      pfmerge new_key  key01 key02        计算多个key的基数，并且存入到new_key

   使用场景:
      网站首页亿级UV的Redis统计方案
      1. 用redis的hash结构存储
          redis——hash = <keyDay,<ip,1>>
          按照ipv4的结构来说明，每个ipv4的地址最多是15个字节(ip = "192.168.111.1"，最多xxx.xxx.xxx.xxx)
          某一天的1.5亿 * 15个字节= 2G，一个月60G，redis撑不住

      2. bitmap
         样本元素越多内存消耗急剧增大，难以管控+各种慢

         如果数据显较大亿级统计,使用bitmaps同样会有这个问题。

         bitmap是通过用位bit数组来表示各元素是否出现，每个元素对应一位，所需的总内存为N个bit。
         基数计数则将每一个元素对应到bit数组中的其中一位，比如bit数组010010101(按照从零开始下标，有的就是1、4、6、8)。
         新进入的元素只需要将已经有的bit数组和新加入的元素进行按位或计算就行。这个方式能大大减少内存占用且位操作迅速。

         But，假设一个样本案例就是一亿个基数位值数据，一个样本就是一亿
         如果要统计1亿个数据的基数位值,大约需要内存100000000/8/1024/1024约等于12M,内存减少占用的效果显著。
         这样得到统计一个对象样本的基数值需要12M。

         如果统计10000个对象样本(1w个亿级),就需要117.1875G将近120G，可见使用bitmaps还是不适用大数据量下(亿级)的基数计数场景，
         但是bitmaps方法是精确计算的。

      3. HyperLogLog
         通过牺牲准确率来换取空间，对于不要求绝对准确率的场景下可以使用，因为概率算法不直接存储数据本身，
         通过一定的概率统计方法预估基数值，同时保证误差在一定范围内，由于又不储存数据故此可以大大节约内存

         HyperLogLog每个键只需要花费12KB的空间，就可以计算接近 2的64次方个不同的元素。
         为什么是 12KB？
          redis默认使用 16384个桶，每个桶最多占用6位(bit),最大全部都是1，值就是63, 这样计算 16384 * 6 / 8 = 12KB


GEO
   1.原理：
     底层数据结构使用Redis的Zset存储，换句话说，zset的命令在GEO中可以使用
     GeoHash核心原理解析： https://www.cnblogs.com/LBSer/p/3310455.html

   2.命令：
      2.1 GEOADD  多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中
          GEOADD city 116.403963 39.915119 "天安门" 116.403414 39.924091 "故宫" 116.024067 40.362639 "长城"

      2.2 GEOPOS  从键里面返回所有给定位置元素的位置（经度和纬度）
          GEOPOS  city 天安门  故宫

      2.3 GEODIST 返回两个给定位置之间的距离。
          GEODIST city  天安门  长城  km

      2.4 GEORADIUS 以给定的经纬度为中心， 返回与中心的距离不超过给定最大距离的所有位置元素。
           GEORADIUS city 116.418017 39.914402 10 km withdist withcoord count 10 withhash desc
             WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。
             WITHCOORD: 将位置元素的经度和维度也一并返回。
             WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。
             COUNT 限定返回的记录数。

      2.5 GEORADIUSBYMEMBER  以给定的位置为中心， 返回与中心的距离不超过给定最大距离的所有位置元素。位置会重复，一般不使用
           GEORADIUS city 天安门 10 km withdist withcoord count 10 withhash desc

      2.6 GEOHASH  返回一个或多个位置元素的 Geohash 表示
           GEOHASH city 天安门 长城

   使用场景：
     美团附近的人或者一公里以内的各种营业厅、加油站、理发店、超市
     详细实现参考：GeoController





















